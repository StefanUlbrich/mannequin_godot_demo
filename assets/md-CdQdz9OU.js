import{b as i,o as s,w as u,g as e,i as a,C as t,v as d,x as m,B as n}from"./modules/vue-quHQFtoz.js";import{I as c}from"./slidev/default-CAAoZ9Ow.js";import{u as p,f}from"./slidev/context-BWrHZ_hU.js";import"./index-B92nqP48.js";import"./modules/shiki-DdGC1ozD.js";const C={__name:"slides.md__slidev_13",setup(_){const{$clicksContext:o,$frontmatter:r}=p();return o.setup(),(x,l)=>(s(),i(c,d(m(n(f)(n(r),12))),{default:u(()=>[l[0]||(l[0]=e("h1",null,"Trees in Rust",-1)),a(" do I find old code? "),a(" better add a new code example "),l[1]||(l[1]=e("ul",null,[e("li",null,"Kinematics is a tree structure"),e("li",null,"Graphs with references in Rust are hard"),e("li",null,[t("Arena allocation to the rescue "),e("ul",null,[e("li",null,"All nodes stored in a coherent block of memory"),e("li",null,"'Manual memory management over indices'"),e("li",null,"Not beautiful but effective")])]),e("li",null,[t("Optimization for depth-first iteration "),e("ul",null,[e("li",null,"Separate trait / structs"),e("li",null,"Sorted upon creation"),e("li",null,"Allows mutable access")])]),e("li",null,[t("Generic and standalone "),e("ul",null,[e("li",null,"Nodes own arbitrary data"),e("li",null,"Payload does not need to implement any trait")])])],-1))]),_:1,__:[0,1]},16))}};export{C as default};
